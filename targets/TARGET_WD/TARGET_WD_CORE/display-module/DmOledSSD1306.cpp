/******************************************************
___________________INCLUDES____________________________
******************************************************/
#include "DmOledSSD1306.h"

// the memory buffer for the display
// TODO: set WD logo bitmap here and show on init
static uint8_t buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
#if (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH > 96*16)
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#if (SSD1306_LCDHEIGHT == 64)
0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
#endif
#endif
};


/******************************************************
___________________DEFINES_____________________________
******************************************************/
#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }


/******************************************************
___________________IMPLEMENTATION______________________
******************************************************/
DmOledSSD1306::DmOledSSD1306(PinName mosi, PinName sck, PinName cs, PinName dc, PinName rst) : DmOledBase(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
	_pinCS = new DigitalOut(cs, 1);
	_pinDC = new DigitalOut(dc, 0);
	_pinRST = new DigitalOut(rst, 1);	// initialize with output high
	_spi = new SPI(mosi, NC, sck);
	#ifdef SSD1306_SPI_USE_NSCK
	_spi->format(8, 3);					// mode 3 as we use nSCK!
	#else
	_spi->format(8, 1);
	#endif
}

DmOledSSD1306::~DmOledSSD1306() {
	delete _pinCS;
	delete _pinDC;
	delete _pinRST;
	delete _spi;
	
	_pinCS = NULL;
	_pinDC = NULL;
	_pinRST = NULL;
	_spi = NULL;
}

void DmOledSSD1306::enterCommandMode(void) {
	_pinDC->write(0);
}

void DmOledSSD1306::enterDataMode(void) {
	_pinDC->write(1);
}

void DmOledSSD1306::writeBus(uint8_t data) {
	_spi->write(data);
}

void DmOledSSD1306::sendCommand(uint8_t index) {
	enterCommandMode();
	select();
	writeBus(index);
	deSelect();
}

void DmOledSSD1306::sendData(uint16_t data) {
	writeBus(data >> 8);
	writeBus(data);
}

void DmOledSSD1306::setAddress(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
	sendCommand(SSD1306_COLUMNADDR);
	sendCommand(x0);
	sendCommand(x1);
	sendCommand(SSD1306_PAGEADDR);
	sendCommand(y0);
	sendCommand(y1);
}

void DmOledSSD1306::setPixel(uint16_t x, uint16_t y, uint16_t color) {
	
	if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
		return;

	// TODO: check rotation?
	
	switch (color)
	{
		case WHITE:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
		case BLACK:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
		case INVERSE: buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
	}
	
}

void DmOledSSD1306::invertDisplay(uint8_t i) {
	if (i) {
		sendCommand(SSD1306_INVERTDISPLAY);
	} else {
		sendCommand(SSD1306_NORMALDISPLAY);
	}
}

void DmOledSSD1306::refreshDisplay(void) {
	
	sendCommand(SSD1306_COLUMNADDR);
	sendCommand(0x00);
	sendCommand(SSD1306_LCDWIDTH - 1);
	
	sendCommand(SSD1306_PAGEADDR);
	sendCommand(0x00);
	#if SSD1306_LCDHEIGHT == 64
	sendCommand(0x07);
	#elif SSD1306_LCDHEIGHT == 32
	sendCommand(0x03);
	#elif SSD1306_LCDHEIGHT == 16
	sendCommand(0x01);
	#endif
	
	enterDataMode();
	select();
	for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
		writeBus(buffer[i]);
    }
	deSelect();
}

// clear everything
void DmOledSSD1306::clearDisplay(void) {
	memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}

void DmOledSSD1306::init(void){
	
	setTextColor(BLACK, WHITE);
	
	// power-on sequence
	_pinRST->write(1);
	// VDD (3.3V) goes high upon start-up, lets just chill for a ms
	wait_ms(1);
	_pinRST->write(0);
	wait_ms(10);
	_pinRST->write(1);
	wait_ms(1);
	
	// init sequence
	sendCommand(SSD1306_DISPLAYOFF);
	
	// Set Memory Addressing Mode
	sendCommand(SSD1306_MEMORYMODE);
	sendCommand(0x00);								// Horizontal Addressing mode (auto page flip)
	
	// Set Column Address
	sendCommand(SSD1306_COLUMNADDR);
	sendCommand(0x00);
	sendCommand(SSD1306_LCDWIDTH - 1);
	
	// Set Page Address
	sendCommand(SSD1306_PAGEADDR);
	sendCommand(0x00);
	#if SSD1306_LCDHEIGHT == 64
	sendCommand(0x07);
	#elif SSD1306_LCDHEIGHT == 32
	sendCommand(0x03);
	#elif SSD1306_LCDHEIGHT == 16
	sendCommand(0x01);
	#endif
	
	// Set Display Start Line
	sendCommand(SSD1306_SETSTARTLINE | 0x0);		// line #0
	
	// Set Segment re-map
	sendCommand(SSD1306_SEGREMAP | 0x0);//sendCommand(SSD1306_SEGREMAP | 0x1);			// column address 127 is mapped to SEG0
	
	// Set MUX
	sendCommand(SSD1306_SETMULTIPLEX);
	sendCommand(SSD1306_LCDHEIGHT - 1);
	
	// Set COM Output Scan Direction
	sendCommand(SSD1306_COMSCANINC);//sendCommand(SSD1306_COMSCANDEC);				// remapped mode. Scan from COM[N-1] to COM0
	
	// Set Display Offset
	sendCommand(SSD1306_SETDISPLAYOFFSET);
	sendCommand(0x0);								// no offset
	
	// Set COM Pins hardware configuration and Contrast Control
	#if defined SSD1306_128_32
		sendCommand(SSD1306_SETCOMPINS);
		sendCommand(0x02);
		sendCommand(SSD1306_SETCONTRAST);
		sendCommand(0x8F);

	#elif defined SSD1306_128_64
		sendCommand(SSD1306_SETCOMPINS);
		sendCommand(0x12);							// Disable COM Left/Right remap, Alternative COM pin configuration
		sendCommand(SSD1306_SETCONTRAST);
		sendCommand(0x7F);

	#elif defined SSD1306_96_16
		sendCommand(SSD1306_SETCOMPINS);
		sendCommand(0x2);
		sendCommand(SSD1306_SETCONTRAST);
		sendCommand(0x10);

	#endif
	
	// Display Clock Divide
	sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
	sendCommand(0x80);								// the suggested ratio 0x80
	
	// Set Pre-charge Period 
	sendCommand(SSD1306_SETPRECHARGE);
	sendCommand(0x22);
	
	// Set VCOMH Deselect Level
	sendCommand(SSD1306_SETVCOMDESELECT);
	sendCommand(0x30);
	
	// Disable Entire Display On
	sendCommand(SSD1306_DISPLAYALLON_RESUME);
	
	// Set Normal Display
	sendCommand(SSD1306_NORMALDISPLAY);				// In normal display a RAM data of 1 indicates an 'ON' pixel
	
	// Deactivate scroll
	sendCommand(SSD1306_DEACTIVATE_SCROLL);
	
	// Enable charge pump regulator
	sendCommand(SSD1306_CHARGEPUMP);
	sendCommand(0x14);								// enable charge pump
	
	// Display On
	sendCommand(SSD1306_DISPLAYON);
	
	wait_ms(100);									// SEG/COM on after 100ms
	
	// Show that we are ready
	refreshDisplay();								// refresh with initial buffer contents
}





